name: RDP via Tailscale (Windows 11)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Enable Remote Desktop (RDP)
        run: |
          Write-Host "🔧 Enabling RDP and Firewall Rules..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force
          
          # Allow RDP in Firewall
          netsh advfirewall firewall delete rule name="RDP-Tailscale" >$null 2>&1
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          Write-Host "👤 Creating temporary RDP user..."
          Add-Type -AssemblyName System.Security
          $chars = [char[]]([char[]](33..126))
          $password = -join ((1..16) | ForEach-Object { $chars | Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          $username = "RDPUser"
          
          if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member $username
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          }

          echo "RDP_USERNAME=$username" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          Write-Host "⬇️ Downloading and Installing Tailscale..."
          $installer = "$env:TEMP\tailscale-setup.exe"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile $installer
          Start-Process $installer -ArgumentList "/quiet" -Wait
          Start-Service Tailscale
          Start-Sleep -Seconds 5

      - name: Connect to Tailscale Network
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          Write-Host "🔗 Connecting to Tailnet..."
          $tsExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          & $tsExe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-runner-${env:GITHUB_RUN_ID}" --accept-routes --accept-dns
          
          Start-Sleep -Seconds 10
          $tsIP = & $tsExe ip -4
          
          if (-not $tsIP) {
              Write-Error "❌ No Tailscale IP assigned."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "✅ Tailscale connected successfully: $tsIP"

      - name: Verify Connection
        run: |
          Write-Host "`n🧠 Checking Tailscale and RDP status..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" status
          Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389

      - name: Display Connection Info
        run: |
          Write-Host "`n==============================="
          Write-Host "💻 Tailscale IP : $env:TAILSCALE_IP"
          Write-Host "👤 Username     : $env:RDP_USERNAME"
          Write-Host "🔑 Password     : $env:RDP_PASSWORD"
          Write-Host "==============================="

      - name: Keep Session Alive
        run: |
          Write-Host "`n🔒 RDP session active. You can now connect using your Tailscale IP."
          Write-Host "Press Ctrl+C in workflow logs to terminate."
          while ($true) {
              Write-Host "[$(Get-Date)] Session running..."
              Start-Sleep -Seconds 300
          }
