name: recyclezone

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Firewall rule for RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart RDP service
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Custom Password
        run: |
          # === Custom Password Section ===
          $password = "Recycle@1234"   # <-- Change this to your desired password
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          $userName = "recyclezone"

          if (-not (Get-LocalUser -Name $userName -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name $userName -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member $userName
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $userName
          } else {
              Set-LocalUser -Name $userName -Password $securePass
          }

          echo "RDP_USER=$userName" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          $authKey = '${{ secrets.TAILSCALE_AUTH_KEY }}'
          $hostname = "gh-runner-$env:GITHUB_RUN_ID"

          if (-not $authKey -or $authKey -eq "") {
              Write-Error "‚ùå Missing TAILSCALE_AUTH_KEY secret. Add it in GitHub ‚Üí Settings ‚Üí Secrets ‚Üí Actions."
              exit 1
          }

          Write-Host "üîë Attempting Tailscale login..."
          $tsUp = & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey --hostname=$hostname 2>&1

          if ($tsUp -match "invalid key" -or $tsUp -match "NeedsLogin") {
              Write-Error "‚ùå Invalid or expired Tailscale Auth Key. Regenerate it at https://login.tailscale.com/admin/settings/authkeys"
              exit 1
          }

          # Wait for Tailscale IP assignment
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "‚ùå Tailscale IP not assigned. Exiting."
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "‚úÖ Connected to Tailscale with IP: $tsIP"

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP connection..."
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "‚ùå TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "‚úÖ TCP connectivity successful!"

      - name: Maintain RDP Access
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "üñ•Ô∏è  Address: $env:TAILSCALE_IP"
          Write-Host "üë§ Username: $env:RDP_USER"
          Write-Host "üîë Password: $env:RDP_PASS"
          Write-Host "==================`n"

          # Keep runner active for 1 hour
          $endTime = (Get-Date).AddHours(1)
          while ((Get-Date) -lt $endTime) {
              Write-Host "[$(Get-Date)] üí° RDP Session Active"
              Start-Sleep -Seconds 60
          }
